
---------------------------------------------------
              Testing the puzzle struct...
---------------------------------------------------
Writing out puzzle...
1 0 0 0 0 0 0 0 0 
0 2 0 0 0 0 0 0 0 
0 0 3 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 

Writing out row 0...
1 0 0 0 0 0 0 0 0 
Writing out column 0...
1 
0 
0 
0 
0 
0 
0 
0 
0 

Writing out minigrid 0...

1 0 0 
0 0 0 
0 0 0 
Cleaning up...
---------------------------------------------------
---------------------------------------------------
              Testing the create class...
---------------------------------------------------
Starting with empty puzzle
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Filling first mini grid
2 8 1 0 0 0 0 0 0 
6 4 7 0 0 0 0 0 0 
5 9 3 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Filling center mini grid
2 8 1 0 0 0 0 0 0 
6 4 7 0 0 0 0 0 0 
5 9 3 0 0 0 0 0 0 
0 0 0 6 5 3 0 0 0 
0 0 0 4 2 9 0 0 0 
0 0 0 1 7 8 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Filling last mini grid
2 8 1 0 0 0 0 0 0 
6 4 7 0 0 0 0 0 0 
5 9 3 0 0 0 0 0 0 
0 0 0 6 5 3 0 0 0 
0 0 0 4 2 9 0 0 0 
0 0 0 1 7 8 0 0 0 
0 0 0 0 0 0 4 5 3 
0 0 0 0 0 0 1 7 6 
0 0 0 0 0 0 8 9 2 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Filling others
2 8 1 7 6 4 5 3 9 
6 4 7 9 3 5 2 8 1 
5 9 3 2 8 1 6 4 7 
4 7 2 6 5 3 9 1 8 
1 3 8 4 2 9 7 6 5 
9 6 5 1 7 8 3 2 4 
7 2 9 8 1 6 4 5 3 
8 5 4 3 9 2 1 7 6 
3 1 6 5 4 7 8 9 2 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test valid_num using arbitrary integer: 1
checking for 1 in column 0, row 0
1 found in column 0/row 0/in the first minigrid. Not a valid number
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Removing values: Should leave 40 spaces open
2 0 1 0 6 4 0 3 9 
6 0 0 9 0 5 0 0 0 
5 9 3 2 8 1 6 4 7 
0 0 0 6 0 3 9 1 0 
0 0 8 4 2 9 0 0 0 
0 0 0 1 0 8 0 0 0 
7 2 0 0 1 6 0 0 0 
8 0 0 0 0 0 0 7 6 
3 1 6 5 0 0 8 0 2 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Using build_puzzle to generate new,sudoku board
2 0 0 0 1 0 4 0 0 
1 4 5 0 2 0 0 3 9 
8 6 0 9 0 3 2 1 5 
6 0 0 0 8 5 0 0 1 
0 0 0 0 9 0 5 0 0 
0 5 1 3 6 4 8 7 0 
0 0 6 0 5 0 0 0 0 
0 1 4 0 0 9 3 0 8 
7 0 0 1 3 8 0 0 4 
Cleaning up...
---------------------------------------------------
---------------------------------------------------
              Testing the solve class...
---------------------------------------------------
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 

Backtracking through the puzzle now...
Here's the new puzzle...
1 4 7 2 3 8 5 6 9 
2 5 8 1 6 9 3 4 7 
3 6 9 4 5 7 1 2 8 
4 7 1 3 8 2 6 9 5 
5 8 2 6 9 1 4 7 3 
6 9 3 5 7 4 2 8 1 
7 1 4 8 2 3 9 5 6 
8 2 5 9 1 6 7 3 4 
9 3 6 7 4 5 8 1 2 

Here's the original puzzle... we'll fill it in a second
Filling the puzzle...
It should look like this:
* * * * * * * * * * *
* 1 6 0 0 0 3 0 0 0 *
* 2 0 0 7 0 6 0 1 4 *
* 0 4 5 0 8 1 0 0 7 *
* 5 0 8 4 0 0 0 0 0 *
* 0 0 4 3 0 8 9 0 0 *
* 0 0 0 0 0 7 2 0 8 *
* 8 0 0 6 3 0 1 9 0 *
* 6 3 0 1 0 5 0 0 2 *
* 0 0 0 8 0 0 0 3 6 *
* * * * * * * * * * *
Here's what the manually filled puzzle is...
1 6 0 0 0 3 0 0 0 
2 0 0 7 0 6 0 1 4 
0 4 5 0 8 1 0 0 7 
5 0 8 4 0 0 0 0 0 
0 0 4 3 0 8 9 0 0 
0 0 0 0 0 7 2 0 8 
8 0 0 6 3 0 1 9 0 
6 3 0 1 0 5 0 0 2 
0 0 0 8 0 0 0 3 6 
Now, we'll solve it!
First, we'll store all the rows, columns, and minigrids
Next, we'll check which number can be added at which places
Then, we'll solve the puzzle using backtrack recursion
All done! Here's the solved puzzle...
1 6 7 5 4 3 8 2 9 
2 8 3 7 9 6 5 1 4 
9 4 5 2 8 1 3 6 7 
5 9 8 4 1 2 6 7 3 
7 2 4 3 6 8 9 5 1 
3 1 6 9 5 7 2 4 8 
8 7 2 6 3 4 1 9 5 
6 3 9 1 7 5 4 8 2 
4 5 1 8 2 9 7 3 6 
This is what we expected:
* * * * * * * * * * *
* 1 6 7 5 4 3 8 2 9 *
* 2 8 3 7 9 6 5 1 4 *
* 9 4 5 2 8 1 3 6 7 *
* 5 9 8 4 1 2 6 7 3 *
* 7 2 4 3 6 8 9 5 1 *
* 3 1 6 9 5 7 2 4 8 *
* 8 7 2 6 3 4 1 9 5 *
* 6 3 9 1 7 5 4 8 2 *
* 4 5 1 8 2 9 7 3 6 *
* * * * * * * * * * *Cleaning up...
---------------------------------------------------
